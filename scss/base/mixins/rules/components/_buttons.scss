@use "../../../../theme" as *;
// @use "../../variables" as *;
@use "../../../props/key-tokens" as key-tokens;
@use "../../../props/colors" as colors;
@use "../../../variables/components/buttons" as *;

$_key-tokens: module-variables("key-tokens");
$button-frame-x: pick-keys($_key-tokens, text-frame-x);
$_colors: module-variables("colors");
$_colorNamePrefix: getColorPrefix();

@mixin base-rules(
  $color: #{$button-default-color},
  $background-color: #{$button-default-bg}
) {
  @include output-props($button-frame-x...);
  --button-background-color: #{$background-color};
  --button-color: #{$color};
  --button-border-color: var(--button-background-color);
  @each $key, $value in $button-base-rules {
    #{$key}: #{$value};
  }
}

@mixin gen-button-color-variations() {
  @each $color in $colorIncludes {
    @if (map-has-key($_colors, $color)) {
      &.button--#{$color} {
        --button-color: var(--#{$_colorNamePrefix}#{$color}-contrast);
        --button-background-color: var(--#{$_colorNamePrefix}#{$color});
      }
    }
  }
}

@mixin inverted-rules(
  $color: #{$button-default-bg},
  $background-color: #{$button-default-color}
) {
  --button-background-color: #{$background-color};
  --button-color: #{$color};
}

@mixin gen-inverted-button-color-variations() {
  @each $color in $colorIncludes {
    @if (map-has-key($_colors, $color)) {
      &.button--#{$color} {
        --button-color: var(--#{$_colorNamePrefix}#{$color});
      }
    }
  }
}

@mixin outline-rules(
  $color: #{$button-outline-default-color},
  $background-color: #{$button-outline-default-bg}
) {
  --button-background-color: #{$background-color};
  --button-color: #{$color};
  --button-border-color: var(--button-color);
}

@mixin gen-outline-color-variations() {
  @each $color in $colorIncludes {
    @if (map-has-key($_colors, $color)) {
      &.button--#{$color} {
        --button-color: var(--#{$_colorNamePrefix}#{$color});
      }
    }
  }
}

@mixin inverted-outline-rules(
  $color: #{$button-inverted-outline-default-color},
  $background-color: #{$button-inverted-outline-default-bg}
) {
  --button-background-color: #{$background-color};
  --button-color: #{$color};
  --button-border-color: var(--button-color);
}

@mixin sm-rules() {
  /// list of values for inline start padding - string (custom prop name) or number value
  $inline-start-list: button-sm-padding-inline-start;
  /// list of values for inline start ratio - string (custom prop name) or number value
  $inline-start-ratio: (
    button-sm-padding-inline-ratio,
    $button-sm-padding-frame-ratio
  );
  /// list of values for inline end padding - string (custom prop name) or number value
  $inline-end-list: button-sm-padding-inline-end;
  /// list of values for inline end ratio - string (custom prop name) or number value
  $inline-end-ratio: (
    button-sm-padding-inline-ratio,
    $button-sm-padding-frame-ratio
  );

  $padding-inline-start: get-text-frame-y(
    $inline-start-list,
    $inline-start-ratio
  );

  $padding-inline-end: get-text-frame-y($inline-end-list, $inline-end-ratio);

  --button-padding-block-start: var(
    --button-sm-padding-block-start,
    #{$button-sm-padding-frame-y}
  );
  --button-padding-block-end: var(
    --button-sm-padding-block-end,
    #{$button-sm-padding-frame-y}
  );
  --button-padding-inline-start: #{$padding-inline-start};
  --button-padding-inline-end: #{$padding-inline-end};
}
