@use "sass:meta";
@use "../../../../theme" as *;
// @use "../../variables" as *;
@use "../../../props/key-tokens" as key-tokens;
@use "../../../props/colors" as colors;
@use "../../../variables/components/buttons" as *;

$_key-tokens: meta.module-variables("key-tokens");
$button-frame-x: pick-keys($_key-tokens, text-frame-x);
$_colors: meta.module-variables("colors");
$_colorNamePrefix: getColorPrefix();

$button-padding-frame-ratios: (
  xs: $button-xs-padding-frame-ratio,
  sm: $button-sm-padding-frame-ratio,
  lg: $button-lg-padding-frame-ratio,
  xl: $button-xl-padding-frame-ratio
);

$button-padding-frame-y: (
  xs: $button-xs-padding-frame-y,
  sm: $button-sm-padding-frame-y,
  lg: $button-lg-padding-frame-y,
  xl: $button-xl-padding-frame-y
);

$button-font-size: (
  xs: $button-xs-font-size,
  sm: $button-sm-font-size,
  lg: $button-lg-font-size,
  xl: $button-xl-font-size
);

// Default rules

@mixin base-rules() {
  @include output-props($button-frame-x...);
  @include output-props($button-base-props...);
  @each $key, $value in $button-base-rules {
    #{$key}: #{$value};
  }
}

@mixin gen-button-color($color) {
  --button-color: var(--#{$_colorNamePrefix}#{$color});
  --button-color-contrast: var(--#{$_colorNamePrefix}#{$color}-contrast);  
}

@mixin gen-button-color-variations() {
  @each $color in $colorIncludes {
    @if (map-has-key($_colors, $color)) {
      &.button--#{$color} {
        @include gen-button-color($color);
        --button-fg: var(--button-fg-#{$color}, var(--button-color-contrast));
        --button-bg: var(--button-bg-#{$color}, var(--button-color));
      }
    }
  }
}

// Default states

@mixin base-state-rules($states...) {
  @each $key, $state in meta.keywords($states) {
    @if $state == hover or $state == focus {
      &:#{$state} {
        --_button-bg-#{$state}: color-mix(in oklab, var(--button-color), calc(var(--button-bg-#{$state}-depth, 1) * 10%) var(--button-bg-#{$state}-color-mix, oklch(from var(--button-color) clamp(0, (l / 0.623 - 1) * -infinity, 1) 0 h))  );
        --_button-border-#{$state}: color-mix(in oklab, var(--button-border-color), calc(var(--button-bg-#{$state}-depth, 1) * 10%) var(--button-bg-#{$state}-color-mix, oklch(from var(--button-color) clamp(0, (l / 0.623 - 1) * -infinity, 1) 0 h))  );
        --button-bg: var(--button-bg-#{$state}, var(--_button-bg-#{$state}));
        --button-fg: var(--button-fg-#{$state}, var(--button-color-contrast));
        --button-border: var(--button-border-#{$state}, var(--_button-border-#{$state}));
      }
    }
  }
}

@mixin base-state-color-variations($states...) {  
  @each $color in $colorIncludes {
    @if (map-has-key($_colors, $color)) {
      @each $key, $state in meta.keywords($states) {
        @if $state == hover or $state == focus {
          &.button--#{$color}:#{$state} {            
            --_button-bg-#{$state}: color-mix(in oklab, var(--button-color), calc(var(--button-bg-#{$state}-depth, 1) * 10%) var(--button-bg-#{$state}-color-mix, oklch(from var(--button-color) clamp(0, (l / 0.623 - 1) * -infinity, 1) 0 h))  );
            --_button-border-#{$state}: color-mix(in oklab, var(--button-border-color), calc(var(--button-bg-#{$state}-depth, 1) * 10%) var(--button-bg-#{$state}-color-mix, oklch(from var(--button-color) clamp(0, (l / 0.623 - 1) * -infinity, 1) 0 h))  );
            --button-bg: var(--button-bg-#{$color}-#{$state}, var(--_button-bg-#{$state}));
            --button-fg: var(--button-fg-#{$color}-#{$state}, var(--button-color-contrast));
            --button-border: var(--button-border-#{$color}-#{$state}, var(--_button-border-#{$state}));
          }
        }
      }
    }
  }
}

/// Inverted buttons

@mixin inverted-rules() {
  --button-fg: var(--button-inverted-default-fg, var(--button-color));
  --button-bg: var(--button-inverted-default-bg, var(--button-color-contrast));
  --button-border-color: var(--button-inverted-default-border-color, var(--button-color-contrast));
}

@mixin inverted-state-rule-output($state) {
    --_button-inverted-bg-#{$state}: color-mix(in oklab, var(--button-color), calc(var(--button-bg-#{$state}-depth, 1) * 10%) var(--button-bg-#{$state}-color-mix, oklch(from var(--button-color) clamp(0, (l / 0.623 - 1) * -infinity, 1) 0 h))  );
    --_button-inverted-border-#{$state}: color-mix(in oklab, var(--button-bg), calc(var(--button-bg-#{$state}-depth, 1) * 10%) var(--button-bg-#{$state}-color-mix, oklch(from var(--button-color) clamp(0, (l / 0.623 - 1) * -infinity, 1) 0 h))  );
    --button-bg: var(--button-inverted-bg-#{$state}, var(--_button-inverted-bg-#{$state}));
    --button-fg: var(--button-inverted-fg-#{$state}, var(--button-color-contrast));
    --button-border: var(--button-inverted-border-#{$state}, var(--_button-inverted-border-#{$state}));  
}

@mixin inverted-state-rules($states...) {
  @each $key, $state in meta.keywords($states) {
    @if $state == hover or $state == focus {
      &:#{$state} {
        @include inverted-state-rule-output($state);
        // --_button-inverted-bg-#{$state}: color-mix(in oklab, var(--button-color), calc(var(--button-bg-#{$state}-depth, 1) * 10%) var(--button-bg-#{$state}-color-mix, oklch(from var(--button-color) clamp(0, (l / 0.623 - 1) * -infinity, 1) 0 h))  );
        // --_button-inverted-border-#{$state}: color-mix(in oklab, var(--button-bg), calc(var(--button-bg-#{$state}-depth, 1) * 10%) var(--button-bg-#{$state}-color-mix, oklch(from var(--button-color) clamp(0, (l / 0.623 - 1) * -infinity, 1) 0 h))  );
        // --button-bg: var(--button-inverted-bg-#{$state}, var(--_button-inverted-bg-#{$state}));
        // --button-fg: var(--button-inverted-fg-#{$state}, var(--button-color-contrast));
        // --button-border: var(--button-inverted-border-#{$state}, var(--_button-inverted-border-#{$state}));
      }
    }
  }
}

@mixin inverted-state-color-variation($color, $state) {
    --_button-inverted-bg-#{$state}: color-mix(in oklab, var(--button-color), calc(var(--button-bg-#{$state}-depth, 1) * 10%) var(--button-bg-#{$state}-color-mix, oklch(from var(--button-color) clamp(0, (l / 0.623 - 1) * -infinity, 1) 0 h))  );
    --_button-inverted-border-#{$state}: color-mix(in oklab, var(--button-bg), calc(var(--button-bg-#{$state}-depth, 1) * 10%) var(--button-bg-#{$state}-color-mix, oklch(from var(--button-color) clamp(0, (l / 0.623 - 1) * -infinity, 1) 0 h))  );
    --button-bg: var(--button-inverted-bg-#{$color}-#{$state}, var(--_button-inverted-bg-#{$state}));
    --button-fg: var(--button-inverted-fg-#{$color}-#{$state}, var(--button-color-contrast));
    --button-border: var(--button-inverted-border-#{$color}-#{$state}, var(--_button-inverted-border-#{$state}));   
}

@mixin inverted-state-color-variations($states...) {  
  @each $color in $colorIncludes {
    @if (map-has-key($_colors, $color)) {
      @each $key, $state in meta.keywords($states) {
        @if $state == hover or $state == focus {
          &.button--#{$color}:#{$state} {
            @include inverted-state-color-variation($color, $state);
            // --_button-inverted-bg-#{$state}: color-mix(in oklab, var(--button-color), calc(var(--button-bg-#{$state}-depth, 1) * 10%) var(--button-bg-#{$state}-color-mix, oklch(from var(--button-color) clamp(0, (l / 0.623 - 1) * -infinity, 1) 0 h))  );
            // --_button-inverted-border-#{$state}: color-mix(in oklab, var(--button-bg), calc(var(--button-bg-#{$state}-depth, 1) * 10%) var(--button-bg-#{$state}-color-mix, oklch(from var(--button-color) clamp(0, (l / 0.623 - 1) * -infinity, 1) 0 h))  );
            // --button-bg: var(--button-inverted-bg-#{$color}-#{$state}, var(--_button-inverted-bg-#{$state}));
            // --button-fg: var(--button-inverted-fg-#{$color}-#{$state}, var(--button-color-contrast));
            // --button-border: var(--button-inverted-border-#{$color}-#{$state}, var(--_button-inverted-border-#{$state}));
          }
        }
      }
    }
  }
}

/// Soft Buttons - TODO - finish off below variations

@mixin soft-rules() {
  --button-fg: var(--button-soft-default-fg, var(--button-color));
  --button-bg: var(--button-soft-default-bg, oklch(from var(--button-color) l c h / var(--button-soft-default-bg-opacity, #{$button-soft-opacity}) ));  
  --button-border-color: var(--button-soft-default-border-color, oklch(from var(--button-color) l c h / var(--button-soft-default-border-opacity, 0) ));    
}

@mixin soft-state-color-variations($states...) {  
  @each $color in $colorIncludes {
    @if (map-has-key($_colors, $color)) {
      @each $key, $state in meta.keywords($states) {
        @if $state == hover or $state == focus {
          &.button--#{$color}:#{$state} {
            --button-bg: var(--button-soft-bg-#{$color}-#{$state}, oklch(from var(--button-color) l c h / var(--button-soft-#{$color}-#{$state}-bg-opacity, #{$button-soft-hover-opacity})));
            --button-fg: var(--button-soft-fg-#{$color}-#{$state}, var(--button-color));
          }
        }
      }
    }
  }
}

/// Outline Buttons
@mixin outline-rules() {
  --button-fg: var(--button-outline-default-fg, var(--button-color));
  --button-bg: var(--button-outline-default-bg, transparent);  
  --button-border-color: var(--button-outline-default-border-color, var(--button-fg));
}

@mixin outline-state-color-variations($states...) {  
  @each $color in $colorIncludes {
    @if (map-has-key($_colors, $color)) {
      @each $key, $state in meta.keywords($states) {
        @if $state == hover or $state == focus {
          &.button--#{$color}:#{$state} {
            --button-bg: var(--button-outline-bg-#{$color}-#{$state}, transparent);
            --button-fg: var(--button-outline-fg-#{$color}-#{$state}, color-mix(in oklab, var(--button-color), calc(var(--button-fg-#{$color}-#{$state}-depth, 1) * 10%) var(--button-fg-#{$color}-#{$state}-color-mix, #000)  ));
          }
        }
      }
    }
  }
}

@mixin ghost-rules() {
  --button-fg: var(--button-ghost-default-fg, var(--button-color-contrast));
  --button-bg: var(--button-ghost-default-bg, transparent);
  --button-border-color: var(--button-ghost-default-border-color, transparent);
}

@mixin ghost-state-color-variations($states...) {  
  @each $color in $colorIncludes {
    @if (map-has-key($_colors, $color)) {
      @each $key, $state in meta.keywords($states) {
        @if $state == hover or $state == focus {
          &.button--#{$color}:#{$state} {
            --button-bg: var(--button-ghost-bg-#{$color}-#{$state}, var(--button-color));
            --button-fg: var(--button-ghost-fg-#{$color}-#{$state}, var(--button-color-contrast));
          }
        }
      }
    }
  }
}

@mixin link-rules() {
  --button-fg: var(--button-link-default-fg, var(--button-color));
  --button-bg: var(--button-link-default-bg, transparent);
  --button-border-color: var(--button-link-default-border-color, transparent);
}

@mixin link-state-rules($states...) {
  @each $key, $state in meta.keywords($states) {
    @if $state == hover or $state == focus {
      &:#{$state} {
        --button-fg: var(--button-link-fg-#{$state}, var(--button-color));
        --button-bg: var(--button-link-bg-#{$state}, transparent);
        text-decoration-line: underline;
      }
    }
  }
}

@mixin wide-rules() {
  --button-padding-inline-wide: clamp(var(--text-frame-x), 10vw, calc(var(--text-frame-x) * 3));
  --button-padding-inline-start: var(--button-padding-inline-wide);
  --button-padding-inline-end: var(--button-padding-inline-wide);
}


@mixin size-rules($size) {
  /// list of values for inline start padding - string (custom prop name) or number value
  $inline-start-list: button-#{$size}-padding-inline-start;
  /// list of values for inline start ratio - string (custom prop name) or number value
  $inline-start-ratio: (
    button-#{$size}-padding-inline-ratio,
    map-get($button-padding-frame-ratios , $size)
  );
  /// list of values for inline end padding - string (custom prop name) or number value
  $inline-end-list: button-sm-padding-inline-end;
  /// list of values for inline end ratio - string (custom prop name) or number value
  $inline-end-ratio: (
    button-#{$size}-padding-inline-ratio,
    map-get($button-padding-frame-ratios , $size)
  );

  $padding-inline-start: get-text-frame-y(
    $inline-start-list,
    $inline-start-ratio
  );

  $padding-inline-end: get-text-frame-y($inline-end-list, $inline-end-ratio);
  $button-padding-block-start: var(--button-#{$size}-padding-block-start, map-get($button-padding-frame-y, $size));
  $button-padding-block-end: var(--button-#{$size}-padding-block-end, map-get($button-padding-frame-y, $size));
  
  --button-padding-block-start: #{$button-padding-block-start};
  --button-padding-block-end: #{$button-padding-block-end};
  --button-padding-inline-start: #{$padding-inline-start};
  --button-padding-inline-end: #{$padding-inline-end};
  font-size: var(--button-#{$size}-font-size, map-get($button-font-size, $size));
}

@mixin gen-button-size-variations() {
  @each $size in ("xs", "sm", "lg", "xl") {
    &.button--#{$size} {
      @include size-rules($size);
    }
  }
}