@use "../../../../theme" as *;
@use "../../../props/wrapper" as wrapper;
@use "../../../props/layout" as layout;

$_layout: module-variables("layout");
$_wrapper: module-variables("wrapper");

$wrapper-props: pick-keys(
  $_wrapper,
  max-wrapper-width wrapper-padding wrapper-padding-min wrapper-width
    wrapper-inline grid-wrapper-columns
);
$grid-props: pick-keys($_wrapper, grid-wrapper-columns);
$layout-grid-props: pick-keys(
  $_layout,
  layout-grid-min layout-grid-gap layout-grid-template-columns
);
$layout-grid-column-count-props: pick-keys(
  $_layout,
  column-count breakpoint column-size
);

@mixin wrapper($include-props: true) {
  @if ($include-props) {
    @include output-props($wrapper-props...);
  }

  padding-inline: var(--wrapper-inline);
}

@mixin wrapper-grid($include-props: true) {
  @if ($include-props) {
    @include output-props($grid-props...);
  }

  display: grid;
  grid-template-columns: var(--grid-wrapper-columns);
  max-width: 100vw; // ?
}

@mixin layout-grid($include-props: true) {
  @if ($include-props) {
    @include output-props($layout-grid-props...);
  }

  display: grid;
  grid-template-columns: var(--layout-grid-template-columns);
  gap: var(--layout-grid-gap);
}

@mixin layout-grid-column-count() {
  @include output-props($layout-grid-column-count-props...);
  --layout-grid-template-columns: repeat(
    var(--layout-grid-auto-repeat, auto-fit),
    minmax(
      min(max(var(--column-size), (100% - var(--breakpoint)) * -999), 100%),
      1fr
    )
  );
}

@mixin flex-layout-grid() {
  display: flex;
  flex-wrap: wrap;
  gap: var(--flex-grid-gap);

  > * {
    display:grid; /// <<< new
    flex: 1 1 var(--flex-grid-min);
  }
}
