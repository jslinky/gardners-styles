@use "sass:meta";
@use "sass:map";
@use "sass:list";
@use "../../../variables/config" as config;
@use "../../../../theme/overrides" as overrides;
@use "../../../../theme" as *;
@use "../../../functions/get-color-prefix" as colorPrefix;
@use "../../../functions/overrides" as *;

@use "../../../props/colors" as colors;

/// Override colorIncludes with the value from overrides if available
$_overrides: meta.module-variables("overrides");
$_config: meta.module-variables("config");

// Use the utility function for clean override handling
$colorIncludes: get-override("colorIncludes", config.$colorIncludes, $_overrides);
$useTailwindForColorOutput: get-override("useTailwindForColorOutput", config.$useTailwindForColorOutput, $_overrides);
$_merged-excludes: map.merge($_config , $_overrides );
$exclude-count: list.length($_merged-excludes);

$_colors: meta.module-variables("colors");
$color-map-keys: map.keys($_colors);

$color-loop-output: ();
$color-loop-output-flat: ();

@function checkIfColorDefined($colorName, $map: $_colors) {
    @return map.has-key($map, $colorName);
}

@function getColorPropValue($colorName, $map: $_colors) {
    @return map.get($map, $colorName);
}

// Removes the leaky variables which are @forwarded and get outputted
@for $i from 1 through $exclude-count {
  $key-to-remove: list.nth($color-map-keys, $i);
  $key-to-remove-starts-with: list.nth(str-explode($key-to-remove, '-'), 1);
    $inColorIncludes: list.index($colorIncludes, $key-to-remove-starts-with);  
    @if not ($inColorIncludes) {
        $_colors: map.remove($_colors, $key-to-remove);
    } 
}


/// Populate $color-loop-output with top level keys from $colorInclues
@each $color in $colorIncludes {
    @if(map.has-key($_colors, $color)) {
        $color-loop-output: map-deep-set($color-loop-output, "#{$color}", ());
    }
}

/// Loop through keys of $_colors and populate each top level of $color-loop-output with all colors with keys that match $colorIncludes values
@for $i from 1 through list.length($color-map-keys) - 1 {
    $current-key: list.nth($color-map-keys, $i);
    $current-key-starts-with: list.nth(str-explode($current-key, '-'), 1);
    $inColorIncludes: list.index($colorIncludes, $current-key-starts-with);
    $current-value: map.get($_colors , $current-key );

    @if($inColorIncludes) {
        $color-loop-output: map-deep-set($color-loop-output, "#{$current-key-starts-with}" "#{$current-key}", #{$current-value});
    }
}

/// Flatten all values in one map
@each $key, $value in $color-loop-output {
    $color-loop-output-flat: map.merge($color-loop-output-flat, $value);
}

@mixin generateAllColors() {

    $colorNamePrefix: colorPrefix.getColorPrefix(); // Get fresh value each time
    
    // Only output the colors that are included in $colorIncludes
    @include output-props("#{$colorNamePrefix}", $color-loop-output-flat...);

    @each $color in $colorIncludes {
        @if(map.has-key($_colors, $color)) {
            /// TODO - conditional check if steps are required - output steps if grey
            @if ($generateSteppedColors) {
                $lightness: if(checkIfColorDefined("#{$colorNamePrefix}#{$color}-l"), getColorPropValue("#{$colorNamePrefix}#{$color}-l"), 0.56);
                @include generate-oklch-centered-lightness-range("#{$color}", $lightness, 12);            
                @include generate-color-surface-text-steps("#{$color}", 12);
            }
            @include generate-color-surface-text("#{$color}");
        }
        
        // Special handling for grey - always generate range regardless of $generateSteppedColors  
        @if($color == "grey") {
            $grey-tint-color: get-override("grey-tint-color", config.$grey-tint-color, $_overrides);
            @include generate-grey-range-colors("grey", 12, #{$grey-tint-color}, 0.020, $colorNamePrefix);
        }
    }
}

@mixin generateTailwindColors() {


    // This mixin outputs colors without the :root selector for use in Tailwind's @theme block
    $colorNamePrefix: colorPrefix.getColorPrefix(); // Get fresh value each time
    
    // First manually output the base component variables for each color
    @each $color in $colorIncludes {
        @if(map.has-key($_colors, $color)) {
            @if(checkIfColorDefined("#{$color}-l")) {
                --#{$colorNamePrefix}#{$color}-l: #{getColorPropValue("#{$color}-l")};
            }
            @if(checkIfColorDefined("#{$color}-c")) {
                --#{$colorNamePrefix}#{$color}-c: #{getColorPropValue("#{$color}-c")};
            }
            @if(checkIfColorDefined("#{$color}-h")) {
                --#{$colorNamePrefix}#{$color}-h: #{getColorPropValue("#{$color}-h")};
            }
        }
    }
    
    // Then output the range variables for each color
    @each $color in $colorIncludes {
        @if(map.has-key($_colors, $color)) {
            @if ($generateSteppedColors) {
                $lightness: if(checkIfColorDefined("#{$color}-l"), getColorPropValue("#{$color}-l"), 0.56);
                @include generate-oklch-centered-lightness-range("#{$color}", $lightness, 12);                
            }
        }
        
        // Special handling for grey - always generate range regardless of $generateSteppedColors
        @if($color == "grey") {
            $grey-tint-color: get-override("grey-tint-color", config.$grey-tint-color, $_overrides);
            $lightness: if(checkIfColorDefined("#{$grey-tint-color}-l"), getColorPropValue("#{$grey-tint-color}-l"), 0.56);
            @include generate-oklch-centered-lightness-range("#{$grey-tint-color}", $lightness, 12);
            @include generate-grey-range-colors("grey", 12, #{$grey-tint-color}, 0.020, $colorNamePrefix);
        }        
    }
    
    // Finally output the main composed color variables that reference the component variables
    @each $color in $colorIncludes {
        @if(map.has-key($_colors, $color)) {
            @if(checkIfColorDefined("#{$color}")) {
                --#{$colorNamePrefix}#{$color}: #{getColorPropValue("#{$color}")};
            }
        }
    }
    
}

@mixin generateTailwindSurfaceText() {
    // This mixin outputs surface text variables outside the @theme block
    @each $color in $colorIncludes {
        @if(map.has-key($_colors, $color)) {
            @include generate-color-surface-text("#{$color}");
            @if ($generateSteppedColors or $color == "grey") {
                @include generate-color-surface-text-steps("#{$color}", 12);
            }
        }
    }
}

// Color related variables
@if $useTailwindForColorOutput == false {
    :root:is(.#{$scopeClassName}) {
        @include generateAllColors();
    }
} @else {
    @debug 'Using Tailwind for color output';
}

:root:is(.#{$scopeClassName}) {
    /// style query for if stepped colors will be generated
    $value: if(get-override("generateSteppedColors", config.$generateSteppedColors, $_overrides), 1, 0);
    --has-stepped-colors: #{$value};
}


/// Output fallback @properties for all colors - uses static values as custom props can't be used in initial-value 
    @each $color in $colorIncludes {
        @if(map.has-key($_colors, $color)) {            
            $lightness: if(checkIfColorDefined("#{$color}-l"), getColorPropValue("#{$color}-l"), 0.56);
            $chroma: if(checkIfColorDefined("#{$color}-c"), getColorPropValue("#{$color}-c"), 0.25);
            $hue: if(checkIfColorDefined("#{$color}-h"), getColorPropValue("#{$color}-h"), 210);
            @if(is-number($lightness) and is-number($chroma) and is-number($hue)) {
                @include generate-oklch-centered-property-fallback-range("#{$color}", $lightness, $chroma, $hue, 12);
            }
        }
    }
