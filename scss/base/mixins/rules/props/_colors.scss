@use "sass:meta";
@use "sass:map";
@use "sass:list";
@use "../../../variables/config" as config;
@use "../../../../theme/overrides" as overrides;
@use "../../../../theme" as *;
@use "../../../functions/get-color-prefix" as colorPrefix;
@use "../../../functions/overrides" as *;

@use "../../../variables/props/colors" as colors;

/// Override colorIncludes with the value from overrides if available
$_overrides: meta.module-variables("overrides");
$_config: meta.module-variables("config");

// Use the utility function for clean override handling
$colorIncludes: get-override("colorIncludes", config.$colorIncludes, $_overrides) !default;
$generateSteppedColors: get-override("generateSteppedColors", config.$generateSteppedColors, $_overrides);
$useTailwindForColorOutput: get-override("useTailwindForColorOutput", config.$useTailwindForColorOutput, $_overrides) !default;
$_merged-excludes: map.merge($_config , $_overrides );
$exclude-count: list.length($_merged-excludes);
$grey-tint-chroma: get-override("grey-tint-chroma", config.$grey-tint-chroma, $_overrides);
$grey-tint-color: get-override("grey-tint-color", config.$grey-tint-color, $_overrides);

$_colors: meta.module-variables("colors");
$color-map-keys: map.keys($_colors);

$color-loop-output: ();
$color-loop-output-flat: ();

@function checkIfColorDefined($colorName, $map: $_colors) {
    @return map.has-key($map, $colorName);
}

@function getColorPropValue($colorName, $map: $_colors) {
    @return map.get($map, $colorName);
}

// @debug 'Colors:' $_colors;

// Removes the leaky variables which are @forwarded and get outputted
@for $i from 1 through $exclude-count {
  $key-to-remove: list.nth($color-map-keys, if($i == 1, $i, $i - 1));
  $key-to-remove-starts-with: list.nth(str-explode($key-to-remove, '-'), 1);
    $inColorIncludes: list.index($colorIncludes, $key-to-remove-starts-with);  
    @if not ($inColorIncludes) {
        $_colors: map.remove($_colors, $key-to-remove);
    } 
}

// @debug 'Colors after:' $_colors;


/// Populate $color-loop-output with top level keys from $colorInclues
@each $color in $colorIncludes {
    @if(map.has-key($_colors, $color)) {
        $color-loop-output: map-deep-set($color-loop-output, "#{$color}", ());
    }
}

/// Loop through keys of $_colors and populate each top level of $color-loop-output with all colors with keys that match $colorIncludes values
@for $i from 1 through list.length($color-map-keys) - 1 {
    $current-key: list.nth($color-map-keys, $i);
    $current-key-starts-with: list.nth(str-explode($current-key, '-'), 1);
    $inColorIncludes: list.index($colorIncludes, $current-key-starts-with);
    $current-value: map.get($_colors , $current-key );

    @if($inColorIncludes) {
        $color-loop-output: map-deep-set($color-loop-output, "#{$current-key-starts-with}" "#{$current-key}", #{$current-value});
    }
}

/// Flatten all values in one map
@each $key, $value in $color-loop-output {
    $color-loop-output-flat: map.merge($color-loop-output-flat, $value);
}

@mixin generateAllColors() {

    $colorNamePrefix: colorPrefix.getColorPrefix(); // Get fresh value each time
    
    // Only output the colors that are included in $colorIncludes
    @include output-props("#{$colorNamePrefix}", $color-loop-output-flat...);

    @each $color in $colorIncludes {
        @if(map.has-key($_colors, $color)) {
            /// TODO - conditional check if steps are required - output steps if grey
            @if(index($generateSteppedColors, $color)) {
                $lightness: if(checkIfColorDefined("#{$colorNamePrefix}#{$color}-l"), getColorPropValue("#{$colorNamePrefix}#{$color}-l"), 0.56);
                @include generate-oklch-centered-lightness-range("#{$color}", $lightness, 12);            
                @include generate-color-surface-text-steps("#{$color}", 12);
            }

            @include generate-color-surface-text("#{$color}");
        }
        
        // Special handling for grey - always generate range regardless of $generateSteppedColors  
        @if($color == "grey") {
            @include generate-grey-range-colors("grey", 12, #{$grey-tint-color}, #{$grey-tint-chroma}, $colorNamePrefix);
        }
    }
}

@mixin generateTailwindColors() {


    // This mixin outputs colors without the :root selector for use in Tailwind's @theme block
    $colorNamePrefix: colorPrefix.getColorPrefix(); // Get fresh value each time
    
    // First manually output the base component variables for each color
    @each $color in $colorIncludes {
        @if(map.has-key($_colors, $color)) {
            @if(checkIfColorDefined("#{$color}-l")) {
                --#{$colorNamePrefix}#{$color}-l: #{getColorPropValue("#{$color}-l")};
            }
            @if(checkIfColorDefined("#{$color}-c")) {
                --#{$colorNamePrefix}#{$color}-c: #{getColorPropValue("#{$color}-c")};
            }
            @if(checkIfColorDefined("#{$color}-h")) {
                --#{$colorNamePrefix}#{$color}-h: #{getColorPropValue("#{$color}-h")};
            }
        }
    }
    
    // Then output the range variables for each color
    @each $color in $colorIncludes {
        @if(map.has-key($_colors, $color)) {

            @if(index($generateSteppedColors, $color)) {
                $lightness: if(checkIfColorDefined("#{$color}-l"), getColorPropValue("#{$color}-l"), 0.56);
                @include generate-oklch-centered-lightness-range("#{$color}", $lightness, 12);                
            }
        }
        
        // Special handling for grey - always generate range regardless of $generateSteppedColors
        @if($color == "grey") {
            $lightness: if(checkIfColorDefined("#{$grey-tint-color}-l"), getColorPropValue("#{$grey-tint-color}-l"), 0.56);
            @include generate-oklch-centered-lightness-range("#{$grey-tint-color}", $lightness, 12);
            @include generate-grey-range-colors("grey", 12, #{$grey-tint-color}, #{$grey-tint-chroma}, $colorNamePrefix);
        }        
    }
    
    // Finally output the main composed color variables that reference the component variables
    @each $color in $colorIncludes {
        @if(map.has-key($_colors, $color)) {
            @if(checkIfColorDefined("#{$color}")) {
                --#{$colorNamePrefix}#{$color}: #{getColorPropValue("#{$color}")};
            }
        }
    }
    
}

@mixin generateTailwindSurfaceText() {
    // This mixin outputs surface text variables outside the @theme block
    @each $color in $colorIncludes {
        @if(map.has-key($_colors, $color)) {
            @include generate-color-surface-text("#{$color}");
            @if(index($generateSteppedColors, $color) or $color == "grey") {
                @include generate-color-surface-text-steps("#{$color}", 12);
            }
        }
    }
}

@mixin outputColorRules() {
    // Color related variables
    @if $useTailwindForColorOutput == false {
        @include output-rules-with-scope() {
            @include generateAllColors();
        }
    } @else {
        @debug 'Using Tailwind for color output';
    }
}

@function get-color-info($color) {
    $lightness: if(checkIfColorDefined("#{$color}-l"), if(is-number(getColorPropValue("#{$color}-l")), getColorPropValue("#{$color}-l"), map-deep-get(colors.$register-lch, '#{$color}-l', 'initial-value')), map-deep-get(colors.$register-lch, '#{$color}-l', 'initial-value'));
    $chroma: if(checkIfColorDefined("#{$color}-c"), if(is-number(getColorPropValue("#{$color}-c")), getColorPropValue("#{$color}-c"), map-deep-get(colors.$register-lch, '#{$color}-c', 'initial-value')), map-deep-get(colors.$register-lch, '#{$color}-c', 'initial-value'));
    $hue: if(checkIfColorDefined("#{$color}-h"), if(is-number(getColorPropValue("#{$color}-h")), getColorPropValue("#{$color}-h"), map-deep-get(colors.$register-lch, '#{$color}-h', 'initial-value')), map-deep-get(colors.$register-lch, '#{$color}-h', 'initial-value'));
    $lightness-steps: generate-lightness-step($lightness, 12);    
    @return (
        'lightness': $lightness,
        'chroma': $chroma,
        'hue': $hue,
        'lightness-steps': $lightness-steps
    )
}

@mixin output-color-steps-prop-register() {
    @each $color in $colorIncludes {
        @if(map.has-key($_colors, $color)) {            
            $color-info: get-color-info($color);
            $lightness: map.get($color-info, 'lightness');
            $chroma: map.get($color-info, 'chroma');
            $hue: map.get($color-info, 'hue');
            $lightness-steps: map.get($color-info, 'lightness-steps');
            @if(is-number($lightness) and is-number($chroma) and is-number($hue)) {
                @for $i from 1 through length($lightness-steps) {
                    @include register-prop("#{$colorNamePrefix}#{$color}-#{$i}", "<color>", true, oklch(nth($lightness-steps, $i) $chroma $hue));
                    @include register-prop("#{$colorNamePrefix}#{$color}-#{$i}-contrast", "*", true, unquote('oklch(from oklch(#{$lightness} #{$chroma} #{$hue}) clamp(#{colors.$fg-lightest-text}, (l / #{colors.$fg-threshold} - 1) * -infinity, #{colors.$fg-darkest-text}) 0 h)'));
                    @include register-prop("#{$colorNamePrefix}#{$color}-#{$i}-contrast-muted", "*", true, unquote('oklch(from oklch(#{$lightness} #{$chroma} #{$hue}) clamp(#{colors.$fg-muted-lightest-text}, (l / #{colors.$fg-threshold} - 1) * -infinity, #{colors.$fg-muted-darkest-text}) 0 h)'));
                }
            }
        }
        @if($color == "grey") {
            $grey-tint-color-info: get-color-info($grey-tint-color);
            $lightness: map.get($grey-tint-color-info, 'lightness');
            $chroma: map.get($grey-tint-color-info, 'chroma');
            $hue: map.get($grey-tint-color-info, 'hue');
            $lightness-steps: map.get($grey-tint-color-info, 'lightness-steps');            
            @if(is-number($lightness) and is-number($chroma) and is-number($hue)) {
                @for $i from 1 through length($lightness-steps) {
                    $lightness-step: nth($lightness-steps, $i);
                    @include register-prop("#{$colorNamePrefix}#{$color}-#{$i}", "*", true, unquote('oklch(from oklch(#{$lightness} #{$chroma} #{$hue}) #{$lightness-step} #{$grey-tint-chroma} h)'));
                    @include register-prop("#{$colorNamePrefix}#{$color}-#{$i}-contrast", "*", true, unquote('oklch(from oklch(#{$lightness-step} #{$grey-tint-chroma} #{$hue}) clamp(#{colors.$fg-lightest-text}, (l / #{colors.$fg-threshold} - 1) * -infinity, #{colors.$fg-darkest-text}) 0 h)'));
                    @include register-prop("#{$colorNamePrefix}#{$color}-#{$i}-contrast-muted", "*", true, unquote('oklch(from oklch(#{$lightness-step} #{$grey-tint-chroma} #{$hue}) clamp(#{colors.$fg-muted-lightest-text}, (l / #{colors.$fg-threshold} - 1) * -infinity, #{colors.$fg-muted-darkest-text}) 0 h)'));
                }
            }
        }
    }
}

@mixin output-color-props-register() {
    @each $color in $colorIncludes {
        @if(map.has-key($_colors, $color)) {
            $color-info: get-color-info($color);
            $lightness: map.get($color-info, 'lightness');
            $chroma: map.get($color-info, 'chroma');
            $hue: map.get($color-info, 'hue'); 
            $value: (
                'syntax': '<color>',
                'inherits': true,
                'initial-value': if(is-number($lightness) and is-number($chroma) and is-number($hue), oklch($lightness $chroma $hue), map-deep-get(colors.$register-lch, '#{$color}', 'initial-value'))
            );           
            @include register-prop("#{$colorNamePrefix}#{$color}", map.get($value, 'syntax'), map.get($value, 'inherits'), map.get($value, 'initial-value'));
            @include register-prop("#{$colorNamePrefix}#{$color}-contrast", "*", true, unquote('oklch(from #{map.get($value, "initial-value")} clamp(#{colors.$fg-lightest-text}, (l / #{colors.$fg-threshold} - 1) * -infinity, #{colors.$fg-darkest-text}) 0 h)'));
            @include register-prop("#{$colorNamePrefix}#{$color}-contrast-muted", "*", true, unquote('oklch(from #{map.get($value, "initial-value")} clamp(#{colors.$fg-muted-lightest-text}, (l / #{colors.$fg-threshold} - 1) * -infinity, #{colors.$fg-muted-darkest-text}) 0 h)'));
        }
    }
}

@mixin outputColorRegisterProps() {
    @include output-color-props-register();
    @include output-color-steps-prop-register();
}


