@use "sass:map";
@use "sass:meta";

/// Utility for handling theme overrides with fallbacks
/// This ensures that if an override variable is not defined, 
/// the system falls back to config defaults gracefully

/// Get override value with config fallback
/// @param {String} $variable-name - The name of the variable to override
/// @param {*} $config-fallback - The fallback value from config
/// @param {Map} $overrides-map - The overrides map to check (optional, uses global $_overrides if not provided)
/// @return {*} - The override value if it exists, otherwise the config fallback
@function get-override($variable-name, $config-fallback, $overrides-map: null) {
    // If no overrides map provided, try to use the module variables from overrides
    @if $overrides-map == null {
        $overrides-map: meta.module-variables("overrides");
    }
    
    @return if(map.has-key($overrides-map, $variable-name), map.get($overrides-map, $variable-name), $config-fallback);
}

/// Get multiple overrides at once
/// @param {Map} $variable-config-pairs - Map of variable names to config fallbacks
/// @param {Map} $overrides-map - The overrides map to check (optional)
/// @return {Map} - Map of variable names to resolved values
@function get-overrides($variable-config-pairs, $overrides-map: null) {
    @if $overrides-map == null {
        $overrides-map: meta.module-variables("overrides");
    }
    
    $result: ();
    @each $variable-name, $config-fallback in $variable-config-pairs {
        $value: get-override($variable-name, $config-fallback, $overrides-map);
        $result: map.merge($result, ($variable-name: $value));
    }
    
    @return $result;
}
