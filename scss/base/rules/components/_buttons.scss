// @use "../../variables" as *;
@use "../../../theme" as *;
@use "../../mixins/rules/components/buttons" as buttons;

// https://css-tricks.com/organizing-design-system-component-patterns-with-css-cascade-layers/?utm_source=CSS-Weekly&utm_campaign=Issue-606&utm_medium=web
@include output-rules-with-scope() {
  :where(.button, button) {
    // Component base layer
    @layer base {
      @include buttons.base-rules();
    }
    // Component modifiers layer
    @layer modifiers {
      @include buttons.gen-button-color-variations();
      &.button--outline {
        @include buttons.outline-rules();
        @include buttons.gen-outline-color-variations();
      }
      &.button--soft {
        @include buttons.soft-rules();
        @include buttons.gen-soft-button-color-variations();
      }
      &.button--inverted {
        @include buttons.inverted-rules();
        @include buttons.gen-inverted-button-color-variations();
        &.button--outline {
          @include buttons.inverted-outline-rules();
        }
      }
      &.button--ghost {
        @include buttons.ghost-rules();
        // @include buttons.gen-ghost-button-color-variations();
      }
      @include buttons.gen-button-size-variations();       
    }
    // Component states layer
    @layer states {
      &.button--ghost {
        &:hover, &:focus {
          @include buttons.ghost-hover-rules();          
        }
        @include buttons.gen-ghost-state-color-variations($hover: hover, $focus: focus);
        // &:active {
        //   @include buttons.ghost-active-rules();
        // }         
      }
    }
  }
}
